
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- Users Collection ---
    // Any authenticated user can create their own user document.
    // Users can only read/update their own document.
    match /users/{userId} {
      allow read, update: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null;
    }
    
    // --- Items Collection ---
    // Anyone can read items.
    // Authenticated users can create items.
    // Only the seller can update or delete their own item.
    match /items/{itemId} {
      allow read;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.sellerId;

      // Subcollection for views
      match /views/{viewId} {
        allow create; // Anyone can create a view log
        allow read, update, delete: if false; // No one can read/modify view logs
      }
    }
    
    // --- Reviews Collection ---
    // Anyone can read reviews.
    // Only authenticated users can create reviews.
    // Users cannot review their own items.
    // Users cannot update/delete reviews.
    match /reviews/{reviewId} {
      allow read;
      allow create: if request.auth != null && request.auth.uid != request.resource.data.sellerId;
      allow update, delete: if false;
    }

    // --- User Favorites Collection ---
    // Users can only create/delete their own favorites.
    // The document ID is {userId}_{itemId}.
    match /userFavorites/{favoriteId} {
        allow read, create, delete: if request.auth != null && request.auth.uid == favoriteId.split('_')[0];
        allow update: if false;
    }

    // --- Message Threads Collection ---
    // Participants can read/update their own threads.
    // Participants can create threads.
    match /messageThreads/{threadId} {
      allow read, update: if request.auth != null && request.auth.uid in resource.data.participantIds;
      // Creation is handled by the API route with Admin SDK, but this rule allows client-side creation if needed.
      allow create: if request.auth != null && request.auth.uid in request.resource.data.participantIds;

      // Messages Subcollection
      match /messages/{messageId} {
        allow read, create: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/messageThreads/$(threadId)).data.participantIds;
        allow update, delete: if false; // Generally, don't allow message editing/deletion by users.
      }
    }

    // --- Product Reports ---
    // Anyone authenticated can create a report.
    // No one can read/update/delete reports directly. This should be handled by admin/functions.
    match /productReports/{itemId}/reports/{userId} {
        allow create: if request.auth != null && request.auth.uid == userId;
        allow read, update, delete: if false;
    }
  }
}
