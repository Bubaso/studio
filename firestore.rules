
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    match /items/{itemId} {
      allow read: if true;
      allow create: if request.auth != null && request.resource.data.sellerId == request.auth.uid;
      allow update: if request.auth != null && resource.data.sellerId == request.auth.uid;
      allow delete: if request.auth != null && resource.data.sellerId == request.auth.uid;

      match /views/{viewId} {
        allow read: if true; 
        allow create: if true; // Server action (authenticated) writes this
      }
    }

    match /userFavorites/{favoriteId} {
      allow read: if true; 
      // Document ID is userId_itemId
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid && favoriteId.startsWith(request.auth.uid + '_');
      allow delete: if request.auth != null && resource.data.userId == request.auth.uid && favoriteId.startsWith(request.auth.uid + '_');
    }

    match /users/{userId} {
      allow read: if true;
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if request.auth != null && request.auth.uid == userId;
    }

    match /messageThreads/{threadId} {
      allow read: if request.auth != null && request.auth.uid in resource.data.participantIds;
      allow create: if request.auth != null && request.auth.uid in request.resource.data.participantIds;
      allow update: if request.auth != null && request.auth.uid in resource.data.participantIds; // For updating lastMessage, item context etc.

      match /messages/{messageId} {
        allow read: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/messageThreads/$(threadId)).data.participantIds;
        allow create: if request.auth != null && 
                        request.resource.data.senderId == request.auth.uid && 
                        request.auth.uid in get(/databases/$(database)/documents/messageThreads/$(threadId)).data.participantIds;
        // Allow authenticated participants to update the readBy field of any message in the thread
        allow update: if request.auth != null && 
                        request.auth.uid in get(/databases/$(database)/documents/messageThreads/$(threadId)).data.participantIds &&
                        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['readBy']);
      }
    }

    match /reviews/{reviewId} {
      allow read: if true;
      allow create: if request.auth != null && request.resource.data.reviewerId == request.auth.uid;
      // Add update/delete rules for reviews if needed (e.g., by reviewer or admin)
    }
  }
}

// Storage Rules (add to your Firebase Storage rules)
/*
rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    // User Avatars: Only authenticated user can write to their own avatar path
    match /avatars/{userId}/{allPaths=**} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // Item Images: Only authenticated user (seller) can write to their item image path
    match /items/{userId}/{allPaths=**} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // Chat Attachments: Authenticated users can write to a path scoped by threadId and their userId
    match /chatAttachments/{threadId}/{userId}/{fileName} {
        allow read: if true; // Or restrict to participants of the thread if metadata is available
        allow write: if request.auth != null && request.auth.uid == userId;
    }
  }
}
*/
