rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Items Collection
    match /items/{itemId} {
      allow read: if true;
      allow create: if request.auth != null && request.resource.data.sellerId == request.auth.uid;
      allow update, delete: if request.auth != null && resource.data.sellerId == request.auth.uid;
    }

    // Users Collection (User Profiles)
    match /users/{userId} {
      // Allow public read of user profiles
      allow read: if true; // DEĞİŞTİRİLDİ: request.auth != null; --> true;
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if request.auth != null && request.auth.uid == userId;
      allow delete: if false;
    }

    // MessageThreads Collection
    match /messageThreads/{threadId} {
      allow read: if request.auth != null && request.auth.uid in resource.data.participantIds;
      allow create: if request.auth != null &&
                       request.auth.uid in request.resource.data.participantIds &&
                       request.resource.data.participantIds[0] < request.resource.data.participantIds[1] &&
                       request.resource.data.participantIds.size() == 2;
      allow update: if request.auth != null && request.auth.uid in resource.data.participantIds;
      allow delete: if false;

      match /messages/{messageId} {
        allow read: if request.auth != null && (
                       get(/databases/$(database)/documents/messageThreads/$(threadId)).data.participantIds[0] == request.auth.uid ||
                       get(/databases/$(database)/documents/messageThreads/$(threadId)).data.participantIds[1] == request.auth.uid
                     );
        allow create: if request.auth != null &&
                         request.resource.data.senderId == request.auth.uid &&
                         (
                           get(/databases/$(database)/documents/messageThreads/$(threadId)).data.participantIds[0] == request.auth.uid ||
                           get(/databases/$(database)/documents/messageThreads/$(threadId)).data.participantIds[1] == request.auth.uid
                         );
        allow update: if false;
        allow delete: if false;
      }
    }

    // Reviews Collection
    match /reviews/{reviewId} {
      allow read: if true;
      allow create: if request.auth != null &&
                       request.resource.data.reviewerId == request.auth.uid &&
                       request.resource.data.sellerId != request.auth.uid &&
                       request.resource.data.rating >= 1 && request.resource.data.rating <= 5 &&
                       request.resource.data.comment.size() <= 1000;
      allow update: if request.auth != null &&
                       resource.data.reviewerId == request.auth.uid &&
                       request.resource.data.rating >= 1 && request.resource.data.rating <= 5 &&
                       request.resource.data.comment.size() <= 1000;
      allow delete: if request.auth != null &&
                       resource.data.reviewerId == request.auth.uid;
    }

    // UserFavorites Collection
    match /userFavorites/{favoriteId} {
      allow read, list: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null &&
                       request.auth.uid == request.resource.data.userId &&
                       favoriteId == request.resource.data.userId + '_' + request.resource.data.itemId &&
                       request.resource.data.userId is string &&
                       request.resource.data.itemId is string;
      allow delete: if request.auth != null && request.auth.uid == resource.data.userId;
      allow update: if false;
    }
  }
}
