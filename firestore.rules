
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Allow public read access to items
    match /items/{itemId} {
      allow read: if true;
      allow create: if request.auth.uid != null;
      allow update, delete: if request.auth.uid == resource.data.sellerId;
      
      // Allow authenticated users to log views
      match /views/{viewId} {
        allow create: if request.auth.uid != null;
        allow read, update, delete: if false; // No one should read/write these directly
      }
    }

    // Secure user profiles
    match /users/{userId} {
      allow read: if true;
      allow create: if request.auth.uid == userId;
      allow update: if request.auth.uid == userId;
      allow delete: if false; // Prevent users from deleting their own profiles
      
      // Secure user's private view history
      match /viewHistory/{historyId} {
         allow read, write: if request.auth.uid == userId;
      }
    }

    // Secure message threads and their subcollections
    match /messageThreads/{threadId} {
        allow read, update, create: if request.auth.uid in resource.data.participantIds;
        allow delete: if false; // Deletion is handled by a flag 'deletedFor'

        match /messages/{messageId} {
            // Allow read only by participants, write only by the sender
            allow read: if get(/databases/$(database)/documents/messageThreads/$(threadId)).data.participantIds[0] == request.auth.uid ||
                        get(/databases/$(database)/documents/messageThreads/$(threadId)).data.participantIds[1] == request.auth.uid;
            allow create: if request.auth.uid == request.resource.data.senderId;
            allow update: if request.auth.uid == request.resource.data.senderId && request.auth.uid in resource.data.readBy; // Allow updating read status
            allow delete: if false;
        }
    }
    
    // Secure product reports
    match /productReports/{itemId} {
        // Anyone can create a report, but the item's seller cannot.
        allow create: if request.auth != null && request.auth.uid != resource.data.sellerId;
        allow read, update, delete: if false; // Should be handled by admin/moderators

        match /reports/{userId} {
            allow create: if request.auth.uid == userId;
            allow read, update, delete: if false;
        }
    }

    // Secure reviews
    match /reviews/{reviewId} {
      allow read: if true;
      allow create: if request.auth.uid == request.resource.data.reviewerId;
      allow update, delete: if request.auth.uid == resource.data.reviewerId;
    }
    
    // Payment intents for purchasing credits
    match /paymentIntents/{intentId} {
        allow read, update: if request.auth.uid == resource.data.userId;
        allow create: if request.auth.uid == request.resource.data.userId;
    }
    
    // Rules for user collections (advanced favorites)
    match /collections/{collectionId} {
      allow read, delete, update: if request.auth.uid == resource.data.userId;
      allow create: if request.auth.uid == request.resource.data.userId;

      // Rules for items within a collection
      match /items/{itemId} {
        allow read, write, delete: if get(/databases/$(database)/documents/collections/$(collectionId)).data.userId == request.auth.uid;
      }
    }
    
  }
}
