rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    match /items/{itemId} {
      allow read: if true; // Allow public read of item details
      allow create: if request.auth != null && request.resource.data.sellerId == request.auth.uid;
      allow update: if request.auth != null && resource.data.sellerId == request.auth.uid;
      allow delete: if request.auth != null && resource.data.sellerId == request.auth.uid;

      // Subcollection for views
      // ItemStatsDisplay (client) reads this for counts.
      // logItemView (server action) writes to this.
      match /views/{viewId} {
        allow read: if true;
        allow create: if true; // Server action writes this, should be implicitly authenticated
      }
    }

    match /userFavorites/{favoriteId} {
      allow read: if true; // Allows ItemStatsDisplay to query for counts
      // Document ID is typically userId_itemId
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid && favoriteId.startsWith(request.auth.uid + '_');
      allow delete: if request.auth != null && resource.data.userId == request.auth.uid && favoriteId.startsWith(request.auth.uid + '_');
    }

    match /users/{userId} {
      allow read: if true; // Public read for user profiles
      allow create: if request.auth != null && request.auth.uid == userId; // User can create their own profile
      allow update: if request.auth != null && request.auth.uid == userId; // User can update their own profile
    }

    match /messageThreads/{threadId} {
      allow read: if request.auth != null && request.auth.uid in resource.data.participantIds;
      allow create: if request.auth != null && request.auth.uid in request.resource.data.participantIds; // Ensure creator is a participant
      allow update: if request.auth != null && request.auth.uid in resource.data.participantIds; // For lastMessage updates, item context

      match /messages/{messageId} {
        allow read: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/messageThreads/$(threadId)).data.participantIds;
        allow create: if request.auth != null &&
                        request.resource.data.senderId == request.auth.uid &&
                        request.auth.uid in get(/databases/$(database)/documents/messageThreads/$(threadId)).data.participantIds;
        // Allow authenticated participants of the thread to update the readBy field of any message in their thread
        allow update: if request.auth != null &&
                        request.auth.uid in get(/databases/$(database)/documents/messageThreads/$(threadId)).data.participantIds &&
                        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['readBy']);
      }
    }

    match /reviews/{reviewId} {
      allow read: if true; // Public read for reviews
      allow create: if request.auth != null && request.resource.data.reviewerId == request.auth.uid; // Only authenticated user can write review as themselves
      // Add update/delete rules for reviews if needed (e.g., by reviewer or admin)
    }
  }
}
