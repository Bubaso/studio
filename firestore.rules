rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Rules for the 'items' collection
    match /items/{itemId} {
      // Anyone can read items
      allow read: if true;
      
      // Temporarily allow any authenticated user to create or update items.
      // This is a workaround for development to bypass auth context issues.
      // TODO: Revert to a more secure rule before production, like:
      // allow create: if isAuthenticated() && request.auth.uid == request.resource.data.sellerId;
      allow create: if isAuthenticated();
      
      // Allow any authenticated user to update. The sellerId check is temporarily removed.
      // TODO: Revert to a more secure rule before production, like:
      // allow update: if isAuthenticated() && request.auth.uid == resource.data.sellerId;
      allow update: if isAuthenticated();

      // Only the seller can delete their own item
      allow delete: if isAuthenticated() && request.auth.uid == resource.data.sellerId;

      // Rules for the 'views' sub-collection within an item
      match /views/{viewId} {
        // Allow anyone to read view counts and create new view documents
        allow read, create: if true;
      }
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Anyone can read user profiles
      allow read: if true;
      // An authenticated user can only create their own user document
      allow create: if isAuthenticated() && request.auth.uid == userId;
      // An authenticated user can only update their own user document
      allow update: if isAuthenticated() && request.auth.uid == userId;
    }

    // Rules for the 'reviews' collection
    match /reviews/{reviewId} {
      // Anyone can read reviews
      allow read: if true;
      // An authenticated user can only create a review as themselves
      allow create: if isAuthenticated() && request.resource.data.reviewerId == request.auth.uid;
      // Users are not allowed to update or delete reviews
      allow update, delete: if false; 
    }

    // Rules for the 'messageThreads' collection
    match /messageThreads/{threadId} {
      // Users can only read, update, or create threads they are a part of
      allow read, update, create: if isAuthenticated() && request.auth.uid in request.resource.data.participantIds;
      
      // Rules for the 'messages' sub-collection within a thread
      match /messages/{messageId} {
        // A user can only read or create messages in threads they are a part of
        allow read, create: if isAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/messageThreads/$(threadId)).data.participantIds;
        // A user can only update a message they sent
        allow update: if isAuthenticated() && request.auth.uid == resource.data.senderId;
        // Users are not allowed to delete messages
        allow delete: if false;
      }
    }
    
    // Rules for the 'userFavorites' collection
    match /userFavorites/{favoriteId} {
      // A user can only read their own favorites
      // The document ID is structured as 'userId_itemId'
      allow read: if isAuthenticated() && request.auth.uid == resource.data.userId;
      // A user can only create or delete their own favorite documents
      allow create, delete: if isAuthenticated() && request.auth.uid == favoriteId.split('_')[0];
    }
  }
}
