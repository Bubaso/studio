
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // `users` collection rules
    match /users/{userId} {
      // Anyone can read a user's public profile
      allow read: if true;
      
      // Only the authenticated owner can create their own user document
      allow create: if isOwner(userId);
      
      // Only the authenticated owner can update their own document
      allow update: if isOwner(userId);
      
      // Users should not be able to delete their accounts via these rules
      allow delete: if false;
    }

    // `items` collection rules
    match /items/{itemId} {
      // Anyone can read item listings
      allow read: if true;
      
      // An authenticated user can create an item if their UID matches the sellerId in the new document
      allow create: if isAuthenticated() && isOwner(request.resource.data.sellerId);

      // The seller can update their own item document. They cannot change the sellerId.
      allow update: if isAuthenticated() && isOwner(resource.data.sellerId) && request.resource.data.sellerId == resource.data.sellerId;
      
      // The seller can delete their own item document
      allow delete: if isAuthenticated() && isOwner(resource.data.sellerId);

      // Rules for subcollections of items, e.g., views
      match /views/{viewId} {
        allow read: if false; // No one should read individual views
        allow list: if false; // Prevent listing all views
        allow create: if true; // Anyone can create a view document (logging a view)
      }
    }
    
    // `reviews` collection rules
    match /reviews/{reviewId} {
      // Anyone can read reviews for an item
      allow read: if true;

      // An authenticated user can create a review, but cannot review their own item
      allow create: if isAuthenticated() && isOwner(request.resource.data.reviewerId) && request.resource.data.reviewerId != request.resource.data.sellerId;

      // Reviews are immutable
      allow update, delete: if false;
    }

    // `messageThreads` collection rules
    match /messageThreads/{threadId} {
      // Users can only access threads they are a part of
      allow read, update: if isAuthenticated() && request.auth.uid in resource.data.participantIds;
      // Allow creation via the backend API route, not directly by clients
      allow create: if isAuthenticated();

      // Rules for the 'messages' subcollection
      match /messages/{messageId} {
        // Users can only read messages in threads they are part of
        allow read, create: if isAuthenticated() && get(/databases/$(database)/documents/messageThreads/$(threadId)).data.participantIds[0] == request.auth.uid || 
                               get(/databases/$(database)/documents/messageThreads/$(threadId)).data.participantIds[1] == request.auth.uid;
        // Messages are immutable
        allow update, delete: if false;
      }
    }
    
    // `userFavorites` collection rules
    match /userFavorites/{favoriteId} {
      // Public can count favorites (via query), but not read individual documents
      allow read: if false;
      allow list: if true; // Allow queries, e.g., to count favorites for an item
      
      // An authenticated user can create/delete their own favorite entry
      // The favoriteId must be in the format {userId}_{itemId}
      allow create, delete: if isAuthenticated() && isOwner(favoriteId.split('_')[0]);
    }

    // `productReports` subcollection rules
    match /productReports/{itemId}/reports/{userId} {
      // A user can create a report for an item if they are authenticated and are the one reporting
      allow create: if isAuthenticated() && isOwner(userId);
      // Nobody can read, update, or delete individual reports directly
      allow read, update, delete: if false;
    }
  }
}
