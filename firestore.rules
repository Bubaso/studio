
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated.
    function isAuthenticated() {
      return request.auth != null;
    }

    // Rules for the 'items' collection
    match /items/{itemId} {
      // Anyone can read items.
      allow read: if true;

      // Only authenticated users can create items, and the sellerId must match their own UID.
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.sellerId;
      
      // Only the seller of an item can update it.
      allow update: if isAuthenticated() && request.auth.uid == resource.data.sellerId;

      // No one can delete items for now (safer).
      allow delete: if false;

      // Rules for the 'views' subcollection within an item.
      match /views/{viewId} {
        allow read: if true; // Allow reading views if needed for analytics.
        allow create: if true; // Anyone can log a view.
      }
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Anyone can read user profiles.
      allow read: if true;
      
      // A user can create their own profile document.
      allow create: if isAuthenticated() && request.auth.uid == userId;

      // A user can only update their own profile.
      allow update: if isAuthenticated() && request.auth.uid == userId;
    }

    // Rules for the 'reviews' collection
    match /reviews/{reviewId} {
      // Anyone can read reviews.
      allow read: if true;
      
      // Authenticated users can create reviews, but not for their own items.
      allow create: if isAuthenticated() && request.resource.data.reviewerId == request.auth.uid && request.resource.data.sellerId != request.auth.uid;
    }

    // Rules for message threads and their subcollections
    match /messageThreads/{threadId} {
      // Creation is handled by the API route with Admin SDK, but this rule provides a layer of security.
      allow create: if isAuthenticated() && request.auth.uid in request.resource.data.participantIds;

      // Participants can read or update their own threads.
      allow read, update: if isAuthenticated() && request.auth.uid in resource.data.participantIds;
      
      // Rules for the 'messages' subcollection.
      match /messages/{messageId} {
        // Participants can read and create messages in their thread.
        // This rule securely checks the parent thread document for the user's ID.
        allow read, create: if isAuthenticated() && (get(/databases/$(database)/documents/messageThreads/$(threadId)).data.participantIds[0] == request.auth.uid || get(/databases/$(database)/documents/messageThreads/$(threadId)).data.participantIds[1] == request.auth.uid);
      }
    }

    // Rules for the 'userFavorites' collection
    match /userFavorites/{favoriteId} {
      // Anyone can perform a list query. This is necessary for the public favorite count on item pages.
      // Security is maintained because specific document reads are still protected by the 'get' rule.
      allow list: if true;

      // A user can read or delete their own specific favorite document.
      // The document ID is a composite key: {userId}_{itemId}
      allow get, delete: if isAuthenticated() && request.auth.uid == favoriteId.split('_')[0];

      // A user can create their own favorite document.
      // The data must also contain the correct userId, and the doc ID must match.
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.userId && request.auth.uid == favoriteId.split('_')[0];
      
      // Updates to favorite documents are not allowed.
      allow update: if false;
    }

    // Rules for product reports
    match /productReports/{itemId} {
        // No one can read or list the top-level report documents directly.
        allow read: if false;
        
        // Rules for the 'reports' subcollection.
        match /reports/{userId} {
            // A user can get their own report to check if they've already reported.
            allow get: if isAuthenticated() && request.auth.uid == userId;
            
            // Users cannot list reports from others.
            allow list: if false;

            // A user can create their own report.
            allow create: if isAuthenticated() && request.auth.uid == userId;
            
            // No updates or deletes on reports.
            allow update, delete: if false;
        }
    }
  }
}
