rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Items can be read by anyone, but only created/updated/deleted by the seller.
    match /items/{itemId} {
      allow read: if true;
      allow create: if isAuthenticated() && request.resource.data.sellerId == request.auth.uid;
      allow update, delete: if isAuthenticated() && resource.data.sellerId == request.auth.uid;

      // Subcollection for views
      match /views/{viewId} {
        allow create: if isAuthenticated(); // Allow any authenticated user to create a view log
        allow read, list, update, delete: if false; // No one needs to read/modify these directly
      }
    }

    // User profiles can be read by anyone.
    // Users can only create/update their own profile.
    match /users/{userId} {
      allow read: if true;
      allow create: if isOwner(userId);
      allow update: if isAuthenticated() && isOwner(userId);
      allow delete: if false; // Prevent user deletion from client

      // Subcollection for user's view history
      match /viewHistory/{historyId} {
        allow create: if isAuthenticated() && isOwner(userId);
        allow read, list, update, delete: if false;
      }
    }

    // Message threads are restricted to participants.
    match /messageThreads/{threadId} {
      allow read, update: if isAuthenticated() && request.auth.uid in resource.data.participantIds;
      allow create: if isAuthenticated() && request.auth.uid in request.resource.data.participantIds;
      
      match /messages/{messageId} {
        allow read, create: if isAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/messageThreads/$(threadId)).data.participantIds;
        allow update, delete: if false; // Prevent message editing/deletion for simplicity
      }
    }

    // Payment intents can be created and read by the user who owns them.
    match /paymentIntents/{intentId} {
        allow read, update: if isAuthenticated() && resource.data.userId == request.auth.uid;
        allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
    }
    
    // Collections
    match /collections/{collectionId} {
      allow read: if isAuthenticated() && isOwner(resource.data.userId);
      allow list: if isAuthenticated() && request.query.where.field == "userId" && request.query.where.value == request.auth.uid;
      allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
      allow update, delete: if isAuthenticated() && isOwner(resource.data.userId);
      
      // Subcollection for items within a collection
      match /items/{itemId} {
        allow read, delete, list: if isAuthenticated() && isOwner(get(/databases/$(database)/documents/collections/$(collectionId)).data.userId);
        allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
      }
    }

    // Rules for product reports
    match /productReports/{itemId} {
      allow read, write: if false; // Parent doc is just a container

      match /reports/{userId} {
        // A user can create their own report document, identified by their UID.
        allow create: if isAuthenticated() && isOwner(userId);
        // A user can read their own report document to check if they've reported it.
        allow read: if isAuthenticated() && isOwner(userId);
        // Nobody can list all reports for an item to protect user privacy.
        allow list, update, delete: if false;
      }
    }
  }
}
