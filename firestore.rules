
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // =====================================================================
    // Users Collection
    // =====================================================================
    match /users/{userId} {
      // Anyone can read a user's public profile
      allow read: if true;
      // A user can create their own profile document, ensuring the UID matches
      allow create: if isAuthenticated() && isOwner(userId);
      // A user can only update their own profile
      allow update: if isAuthenticated() && isOwner(userId);
      // Users cannot delete their profiles through the app
      allow delete: if false;
    }

    // =====================================================================
    // Items Collection
    // =====================================================================
    match /items/{itemId} {
      // Anyone can read item listings
      allow read: if true;
      // Authenticated users can create items, but must be the seller
      allow create: if isAuthenticated() && request.resource.data.sellerId == request.auth.uid;
      // Only the seller can update their own item
      allow update: if isAuthenticated() && isOwner(resource.data.sellerId);
      // Only the seller can delete their own item
      allow delete: if isAuthenticated() && isOwner(resource.data.sellerId);

      // Subcollection for item views
      match /views/{viewId} {
        // Any authenticated user can create a view log. No reads/updates needed from client.
        allow create: if isAuthenticated();
        allow read, update, delete: if false;
      }
    }
    
    // =====================================================================
    // Reviews Collection
    // =====================================================================
    match /reviews/{reviewId} {
      // Anyone can read reviews
      allow read: if true;
      // An authenticated user can create a review if they are the author and not the seller of the item.
      // Uniqueness is handled by the server action before write.
      allow create: if isAuthenticated()
                    && isOwner(request.resource.data.reviewerId)
                    && request.resource.data.sellerId != request.auth.uid;
      // A user can update or delete their own review
      allow update, delete: if isAuthenticated() && isOwner(resource.data.reviewerId);
    }
    
    // =====================================================================
    // userFavorites Collection
    // =====================================================================
    match /userFavorites/{favoriteId} {
      // A user can only read, create, or delete their own favorite documents.
      // The favoriteId is structured as `userId_itemId`.
      allow read, create, delete: if isAuthenticated() && favoriteId.split('_')[0] == request.auth.uid;
      // Updates are not expected for this document structure.
      allow update: if false;
    }

    // =====================================================================
    // messageThreads Collection
    // =====================================================================
    match /messageThreads/{threadId} {
      // Only participants can read or update a thread.
      allow read, update: if isAuthenticated() && request.auth.uid in resource.data.participantIds;
      // Creation is handled by the secure API route, not direct client write.
      allow create: if false; 
      
      // Subcollection for messages within a thread
      match /messages/{messageId} {
        // Only participants of the parent thread can read/write messages.
        allow read, write: if isAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/messageThreads/$(threadId)).data.participantIds;
      }
    }
    
    // =====================================================================
    // productReports Collection
    // =====================================================================
    match /productReports/{itemId} {
      // This is a container document, no direct access.
      allow read, write: if false;

      match /reports/{userId} {
        // A user can only create their own report document.
        allow create: if isAuthenticated() && isOwner(userId);
        // No one should read/update/delete reports directly. This is for backend processing.
        allow read, update, delete: if false;
      }
    }
  }
}
