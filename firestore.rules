rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Items: Publicly readable, only owner can create/update/delete
    match /items/{itemId} {
      allow read: if true; // Everyone can read items
      // Temporarily relaxed for diagnostics:
      allow create: if isAuthenticated();
      // Original rule was: allow create: if isAuthenticated() && request.auth.uid == request.resource.data.sellerId;
      allow update: if isAuthenticated() && request.auth.uid == resource.data.sellerId;
      allow delete: if isAuthenticated() && request.auth.uid == resource.data.sellerId;

      // Subcollection: Views for items
      match /views/{viewId} {
        allow read: if true;
        allow create: if true; // Anyone can log a view
      }
    }

    // Users: Readable by anyone, writable only by the user themselves
    match /users/{userId} {
      allow read: if true;
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isAuthenticated() && request.auth.uid == userId;
    }

    // Reviews: Readable by anyone, only authenticated users can create, owner can update/delete
    match /reviews/{reviewId} {
      allow read: if true;
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.reviewerId;
      allow update: if isAuthenticated() && request.auth.uid == resource.data.reviewerId;
      allow delete: if isAuthenticated() && request.auth.uid == resource.data.reviewerId;
    }

    // User Favorites: Only accessible by the user who owns the favorite document
    match /userFavorites/{favoriteId} {
      function isOwner() {
        // Assuming favoriteId is structured as 'userId_itemId'
        return request.auth.uid == favoriteId.split('_')[0];
      }
      allow read, list, write, delete: if isAuthenticated() && isOwner();
    }

    // Message Threads & Messages
    match /messageThreads/{threadId} {
      function isParticipant() {
        return request.auth.uid in resource.data.participantIds;
      }
       function isCreatingParticipant() {
        return request.auth.uid in request.resource.data.participantIds;
      }

      allow read: if isAuthenticated() && isParticipant();
      allow create: if isAuthenticated() && isCreatingParticipant();
      allow update: if isAuthenticated() && isParticipant();

      match /messages/{messageId} {
        allow read, list: if isAuthenticated() && isParticipant();
        allow create: if isAuthenticated() && isParticipant() && request.auth.uid == request.resource.data.senderId;
      }
    }
  }
}
